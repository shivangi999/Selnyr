{"ast":null,"code":"import axios from \"../helpers/axios\";\nimport { categoryConstansts } from \"./constants\";\n\nconst getAllCategory = () => {\n  return async dispatch => {\n    dispatch({\n      type: categoryConstansts.GET_ALL_CATEGORIES_REQUEST\n    });\n    const res = await axios.get(`category/getcategory`);\n    console.log(res);\n\n    if (res.status === 200) {\n      const {\n        categoryList\n      } = res.data;\n      dispatch({\n        type: categoryConstansts.GET_ALL_CATEGORIES_SUCCESS,\n        payload: {\n          categories: categoryList\n        }\n      });\n    } else {\n      dispatch({\n        type: categoryConstansts.GET_ALL_CATEGORIES_FAILURE,\n        payload: {\n          error: res.data.error\n        }\n      });\n    }\n  };\n};\n\nexport const addCategory = form => {\n  return async dispatch => {\n    dispatch({\n      type: categoryConstansts.ADD_NEW_CATEGORY_REQUEST\n    });\n\n    try {\n      const res = await axios.post(`/category/create`, form);\n\n      if (res.status === 201) {\n        dispatch({\n          type: categoryConstansts.ADD_NEW_CATEGORY_SUCCESS,\n          payload: {\n            category: res.data.category\n          }\n        });\n      } else {\n        dispatch({\n          type: categoryConstansts.ADD_NEW_CATEGORY_FAILURE,\n          payload: res.data.error\n        });\n      }\n    } catch (error) {\n      console.log(error.response);\n    }\n  };\n};\nexport const updateCategories = form => {\n  return async dispatch => {\n    dispatch({\n      type: categoryConstansts.UPDATE_CATEGORIES_REQUEST\n    });\n    const res = await axios.post(`/category/update`, form);\n\n    if (res.status === 201) {\n      dispatch({\n        type: categoryConstansts.UPDATE_CATEGORIES_SUCCESS\n      });\n      dispatch(getAllCategory());\n    } else {\n      const {\n        error\n      } = res.data;\n      dispatch({\n        type: categoryConstansts.UPDATE_CATEGORIES_FAILURE,\n        payload: {\n          error\n        }\n      });\n    }\n  };\n};\nexport const deleteCategories = ids => {\n  return async dispatch => {\n    dispatch({\n      type: categoryConstansts.DELETE_CATEGORIES_REQUEST\n    });\n    const res = await axios.post(`/category/delete`, {\n      payload: {\n        ids\n      }\n    });\n\n    if (res.status == 201) {\n      dispatch(getAllCategory());\n      dispatch({\n        type: categoryConstansts.DELETE_CATEGORIES_SUCCESS\n      });\n    } else {\n      const {\n        error\n      } = res.data;\n      dispatch({\n        type: categoryConstansts.DELETE_CATEGORIES_FAILURE,\n        payload: {\n          error\n        }\n      });\n    }\n  };\n};\nexport { getAllCategory };","map":{"version":3,"sources":["C:/Users/Aman/Desktop/roc8/Selnyr/admin/src/actions/category.action.js"],"names":["axios","categoryConstansts","getAllCategory","dispatch","type","GET_ALL_CATEGORIES_REQUEST","res","get","console","log","status","categoryList","data","GET_ALL_CATEGORIES_SUCCESS","payload","categories","GET_ALL_CATEGORIES_FAILURE","error","addCategory","form","ADD_NEW_CATEGORY_REQUEST","post","ADD_NEW_CATEGORY_SUCCESS","category","ADD_NEW_CATEGORY_FAILURE","response","updateCategories","UPDATE_CATEGORIES_REQUEST","UPDATE_CATEGORIES_SUCCESS","UPDATE_CATEGORIES_FAILURE","deleteCategories","ids","DELETE_CATEGORIES_REQUEST","DELETE_CATEGORIES_SUCCESS","DELETE_CATEGORIES_FAILURE"],"mappings":"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","sourcesContent":["import axios from \"../helpers/axios\";\r\nimport { categoryConstansts } from \"./constants\";\r\n\r\nconst getAllCategory = () => {\r\n    return async dispatch => {\r\n\r\n        dispatch({ type: categoryConstansts.GET_ALL_CATEGORIES_REQUEST });\r\n        const res = await axios.get(`category/getcategory`);\r\n        console.log(res);\r\n        if (res.status === 200) {\r\n\r\n            const { categoryList } = res.data;\r\n\r\n            dispatch({\r\n                type: categoryConstansts.GET_ALL_CATEGORIES_SUCCESS,\r\n                payload: { categories: categoryList }\r\n            });\r\n        } else {\r\n            dispatch({\r\n                type: categoryConstansts.GET_ALL_CATEGORIES_FAILURE,\r\n                payload: { error: res.data.error }\r\n            });\r\n        }\r\n\r\n\r\n    }\r\n}\r\n\r\nexport const addCategory = (form) => {\r\n    return async dispatch => {\r\n        dispatch({ type: categoryConstansts.ADD_NEW_CATEGORY_REQUEST });\r\n        try {\r\n            const res = await axios.post(`/category/create`, form);\r\n            if (res.status === 201) {\r\n                dispatch({\r\n                    type: categoryConstansts.ADD_NEW_CATEGORY_SUCCESS,\r\n                    payload: { category: res.data.category }\r\n                });\r\n            } else {\r\n                dispatch({\r\n                    type: categoryConstansts.ADD_NEW_CATEGORY_FAILURE,\r\n                    payload: res.data.error\r\n                });\r\n            }\r\n        } catch (error) {   \r\n            console.log(error.response);\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport const updateCategories = (form) => {\r\n    return async dispatch => {\r\n        dispatch({ type: categoryConstansts.UPDATE_CATEGORIES_REQUEST });\r\n        const res = await axios.post(`/category/update`, form);\r\n        if (res.status === 201) {\r\n            dispatch({ type: categoryConstansts.UPDATE_CATEGORIES_SUCCESS });\r\n            dispatch(getAllCategory());\r\n        } else {\r\n            const { error } = res.data;\r\n            dispatch({\r\n                type: categoryConstansts.UPDATE_CATEGORIES_FAILURE,\r\n                payload: { error }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport const deleteCategories = (ids) => {\r\n    return async dispatch => {\r\n        dispatch({ type: categoryConstansts.DELETE_CATEGORIES_REQUEST });\r\n        const res = await axios.post(`/category/delete`, {\r\n            payload: {\r\n                ids\r\n            }\r\n        });\r\n        if (res.status == 201) {\r\n            dispatch(getAllCategory());\r\n            dispatch({ type: categoryConstansts.DELETE_CATEGORIES_SUCCESS });\r\n        } else {\r\n            const { error } = res.data;\r\n            dispatch({\r\n                type: categoryConstansts.DELETE_CATEGORIES_FAILURE,\r\n                payload: { error }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport {\r\n    getAllCategory\r\n}"]},"metadata":{},"sourceType":"module"}