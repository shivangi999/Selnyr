{"ast":null,"code":"import { authConstants } from \"./constants\";\nimport axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from \"./types\";\nexport const login = user => dispatch => {\n  // console.log(user);\n  axios.post(\"/api/admin/signin\", user).then(res => {\n    console.log(res); //Save to localStorage\n\n    const {\n      token\n    } = res.data;\n    localStorage.setItem(\"jwtToken\", token); //save to localStorage\n\n    setAuthToken(token); //Decode token to get user data\n\n    const decoded = jwt_decode(token); //set current User\n\n    dispatch(setCurrentUser(decoded));\n    isUserLoggedIn();\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }) // console.log(err),\n  );\n}; // Set logged in user\n\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n};\nexport const isUserLoggedIn = () => {\n  return async dispatch => {\n    const token = localStorage.getItem('token');\n\n    if (token) {\n      const user = JSON.parse(localStorage.getItem('user'));\n      dispatch({\n        type: authConstants.LOGIN_SUCCESS,\n        payload: {\n          token,\n          user\n        }\n      });\n    } else {\n      dispatch({\n        type: authConstants.LOGIN_FAILURE,\n        payload: {\n          error: 'Failed to login'\n        }\n      });\n    }\n  };\n};\nexport const signout = () => dispatch => {\n  //Remove token from LOcal Storage\n  localStorage.removeItem(\"jwtToken\"); // Remove token from local Storage\n\n  setAuthToken(false); // Set current user tp empty object{} which will set is Authenticated\n\n  dispatch(setCurrentUser({})); // dispatch({ type: authConstants.LOGOUT_REQUEST });\n  // const res = await axios.post(`/admin/signout`);\n  //\n  // if(res.status === 200){\n  //     localStorage.clear();\n  //     dispatch({ type: authConstants.LOGOUT_SUCCESS });\n  // }else{\n  //     dispatch({\n  //         type: authConstants.LOGOUT_FAILURE,\n  //         payload: { error: res.data.error }\n  //     });\n  // }\n};","map":{"version":3,"sources":["C:/Users/Aman/Desktop/roc8/Selnyr/admin/src/actions/auth.actions.js"],"names":["authConstants","axios","setAuthToken","jwt_decode","GET_ERRORS","SET_CURRENT_USER","USER_LOADING","login","user","dispatch","post","then","res","console","log","token","data","localStorage","setItem","decoded","setCurrentUser","isUserLoggedIn","catch","err","type","payload","response","getItem","JSON","parse","LOGIN_SUCCESS","LOGIN_FAILURE","error","signout","removeItem"],"mappings":"AAAA,SAASA,aAAT,QAA8B,aAA9B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SACEC,UADF,EAEEC,gBAFF,EAGEC,YAHF,QAIO,SAJP;AAOA,OAAO,MAAMC,KAAK,GAAIC,IAAD,IAAUC,QAAQ,IAAI;AAEvC;AAEAR,EAAAA,KAAK,CACJS,IADD,CACM,mBADN,EAC2BF,IAD3B,EAECG,IAFD,CAEMC,GAAG,IAAI;AAEXC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ,EAFW,CAGX;;AACA,UAAM;AAAEG,MAAAA;AAAF,QAAYH,GAAG,CAACI,IAAtB;AACAC,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCH,KAAjC,EALW,CAOX;;AACAb,IAAAA,YAAY,CAACa,KAAD,CAAZ,CARW,CAUX;;AACA,UAAMI,OAAO,GAAGhB,UAAU,CAACY,KAAD,CAA1B,CAXW,CAaX;;AACAN,IAAAA,QAAQ,CAACW,cAAc,CAACD,OAAD,CAAf,CAAR;AAEAE,IAAAA,cAAc;AAEf,GApBD,EAqBCC,KArBD,CAqBOC,GAAG,IACRd,QAAQ,CAAC;AACPe,IAAAA,IAAI,EAAEpB,UADC;AAEPqB,IAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaV;AAFf,GAAD,CAtBV,CA0BE;AA1BF;AA6BH,CAjCM,C,CAkCP;;AACA,OAAO,MAAMI,cAAc,GAAGD,OAAO,IAAI;AACvC,SAAO;AACLK,IAAAA,IAAI,EAAEnB,gBADD;AAELoB,IAAAA,OAAO,EAAEN;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,MAAME,cAAc,GAAG,MAAM;AAChC,SAAO,MAAMZ,QAAN,IAAkB;AACrB,UAAMM,KAAK,GAAGE,YAAY,CAACU,OAAb,CAAqB,OAArB,CAAd;;AACA,QAAGZ,KAAH,EAAS;AACL,YAAMP,IAAI,GAAGoB,IAAI,CAACC,KAAL,CAAWZ,YAAY,CAACU,OAAb,CAAqB,MAArB,CAAX,CAAb;AACAlB,MAAAA,QAAQ,CAAC;AACLe,QAAAA,IAAI,EAAExB,aAAa,CAAC8B,aADf;AAELL,QAAAA,OAAO,EAAE;AACLV,UAAAA,KADK;AACEP,UAAAA;AADF;AAFJ,OAAD,CAAR;AAMH,KARD,MAQK;AACDC,MAAAA,QAAQ,CAAC;AACLe,QAAAA,IAAI,EAAExB,aAAa,CAAC+B,aADf;AAELN,QAAAA,OAAO,EAAE;AAAEO,UAAAA,KAAK,EAAE;AAAT;AAFJ,OAAD,CAAR;AAIH;AACJ,GAhBD;AAiBH,CAlBM;AAoBP,OAAO,MAAMC,OAAO,GAAG,MAAMxB,QAAQ,IAAG;AAElC;AACAQ,EAAAA,YAAY,CAACiB,UAAb,CAAwB,UAAxB,EAHkC,CAKlC;;AACAhC,EAAAA,YAAY,CAAC,KAAD,CAAZ,CANkC,CAQlC;;AACAO,EAAAA,QAAQ,CAACW,cAAc,CAAC,EAAD,CAAf,CAAR,CATkC,CAWhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEP,CAxBM","sourcesContent":["import { authConstants } from \"./constants\";\r\nimport axios from \"axios\";\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport {\r\n  GET_ERRORS,\r\n  SET_CURRENT_USER,\r\n  USER_LOADING\r\n} from \"./types\";\r\n\r\n\r\nexport const login = (user) => dispatch => {\r\n\r\n    // console.log(user);\r\n\r\n    axios\r\n    .post(\"/api/admin/signin\", user)\r\n    .then(res => {\r\n\r\n      console.log(res);\r\n      //Save to localStorage\r\n      const { token } = res.data;\r\n      localStorage.setItem(\"jwtToken\", token);\r\n\r\n      //save to localStorage\r\n      setAuthToken(token);\r\n\r\n      //Decode token to get user data\r\n      const decoded = jwt_decode(token);\r\n\r\n      //set current User\r\n      dispatch(setCurrentUser(decoded));\r\n\r\n      isUserLoggedIn();\r\n\r\n    })\r\n    .catch(err =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data\r\n      })\r\n      // console.log(err),\r\n    );\r\n\r\n}\r\n// Set logged in user\r\nexport const setCurrentUser = decoded => {\r\n  return {\r\n    type: SET_CURRENT_USER,\r\n    payload: decoded\r\n  };\r\n};\r\n\r\nexport const isUserLoggedIn = () => {\r\n    return async dispatch => {\r\n        const token = localStorage.getItem('token');\r\n        if(token){\r\n            const user = JSON.parse(localStorage.getItem('user'));\r\n            dispatch({\r\n                type: authConstants.LOGIN_SUCCESS,\r\n                payload: {\r\n                    token, user\r\n                }\r\n            });\r\n        }else{\r\n            dispatch({\r\n                type: authConstants.LOGIN_FAILURE,\r\n                payload: { error: 'Failed to login' }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport const signout = () => dispatch =>{\r\n\r\n      //Remove token from LOcal Storage\r\n      localStorage.removeItem(\"jwtToken\");\r\n\r\n      // Remove token from local Storage\r\n      setAuthToken(false);\r\n\r\n      // Set current user tp empty object{} which will set is Authenticated\r\n      dispatch(setCurrentUser({}));\r\n\r\n        // dispatch({ type: authConstants.LOGOUT_REQUEST });\r\n        // const res = await axios.post(`/admin/signout`);\r\n        //\r\n        // if(res.status === 200){\r\n        //     localStorage.clear();\r\n        //     dispatch({ type: authConstants.LOGOUT_SUCCESS });\r\n        // }else{\r\n        //     dispatch({\r\n        //         type: authConstants.LOGOUT_FAILURE,\r\n        //         payload: { error: res.data.error }\r\n        //     });\r\n        // }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}