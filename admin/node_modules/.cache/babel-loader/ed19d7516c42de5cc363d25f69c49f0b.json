{"ast":null,"code":"import { authConstants } from \"./constants\";\nimport axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from \"./types\";\nexport const login = user => dispatch => {\n  console.log(user);\n  axios.post(\"/admin/signin\", user).then(res => {\n    //Save to localStorage\n    const {\n      token\n    } = res.data;\n  }); // return async (dispatch) => {\n  //\n  //     dispatch({ type: authConstants.LOGIN_REQUEST });\n  //     const res = await axios.post(`/admin/signin`, {\n  //         ...user\n  //     });\n  //\n  //     if(res.status === 200){\n  //         const { token, user } = res.data;\n  //         localStorage.setItem('token', token);\n  //         localStorage.setItem('user', JSON.stringify(user));\n  //         dispatch({\n  //             type: authConstants.LOGIN_SUCCESS,\n  //             payload: {\n  //                 token, user\n  //             }\n  //         });\n  //     }else{\n  //         if(res.status === 400){\n  //             dispatch({\n  //                 type: authConstants.LOGIN_FAILURE,\n  //                 payload: { error: res.data.error }\n  //             });\n  //         }\n  //     }\n  // }\n};\nexport const isUserLoggedIn = () => {\n  return async dispatch => {\n    const token = localStorage.getItem('token');\n\n    if (token) {\n      const user = JSON.parse(localStorage.getItem('user'));\n      dispatch({\n        type: authConstants.LOGIN_SUCCESS,\n        payload: {\n          token,\n          user\n        }\n      });\n    } else {\n      dispatch({\n        type: authConstants.LOGIN_FAILURE,\n        payload: {\n          error: 'Failed to login'\n        }\n      });\n    }\n  };\n};\nexport const signout = () => {\n  return async dispatch => {\n    dispatch({\n      type: authConstants.LOGOUT_REQUEST\n    });\n    const res = await axios.post(`/admin/signout`);\n\n    if (res.status === 200) {\n      localStorage.clear();\n      dispatch({\n        type: authConstants.LOGOUT_SUCCESS\n      });\n    } else {\n      dispatch({\n        type: authConstants.LOGOUT_FAILURE,\n        payload: {\n          error: res.data.error\n        }\n      });\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/Aman/Desktop/Roc8/Selnyr/admin/src/actions/auth.actions.js"],"names":["authConstants","axios","setAuthToken","jwt_decode","GET_ERRORS","SET_CURRENT_USER","USER_LOADING","login","user","dispatch","console","log","post","then","res","token","data","isUserLoggedIn","localStorage","getItem","JSON","parse","type","LOGIN_SUCCESS","payload","LOGIN_FAILURE","error","signout","LOGOUT_REQUEST","status","clear","LOGOUT_SUCCESS","LOGOUT_FAILURE"],"mappings":"AAAA,SAASA,aAAT,QAA8B,aAA9B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SACEC,UADF,EAEEC,gBAFF,EAGEC,YAHF,QAIO,SAJP;AAOA,OAAO,MAAMC,KAAK,GAAIC,IAAD,IAASC,QAAQ,IAAI;AAEtCC,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACAP,EAAAA,KAAK,CACJW,IADD,CACM,eADN,EACuBJ,IADvB,EAECK,IAFD,CAEMC,GAAG,IAAI;AAEX;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAYD,GAAG,CAACE,IAAtB;AACD,GAND,EAHsC,CAYtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,CAtCM;AAwCP,OAAO,MAAMC,cAAc,GAAG,MAAM;AAChC,SAAO,MAAMR,QAAN,IAAkB;AACrB,UAAMM,KAAK,GAAGG,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;;AACA,QAAGJ,KAAH,EAAS;AACL,YAAMP,IAAI,GAAGY,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAAb;AACAV,MAAAA,QAAQ,CAAC;AACLa,QAAAA,IAAI,EAAEtB,aAAa,CAACuB,aADf;AAELC,QAAAA,OAAO,EAAE;AACLT,UAAAA,KADK;AACEP,UAAAA;AADF;AAFJ,OAAD,CAAR;AAMH,KARD,MAQK;AACDC,MAAAA,QAAQ,CAAC;AACLa,QAAAA,IAAI,EAAEtB,aAAa,CAACyB,aADf;AAELD,QAAAA,OAAO,EAAE;AAAEE,UAAAA,KAAK,EAAE;AAAT;AAFJ,OAAD,CAAR;AAIH;AACJ,GAhBD;AAiBH,CAlBM;AAoBP,OAAO,MAAMC,OAAO,GAAG,MAAM;AACzB,SAAO,MAAMlB,QAAN,IAAkB;AAErBA,IAAAA,QAAQ,CAAC;AAAEa,MAAAA,IAAI,EAAEtB,aAAa,CAAC4B;AAAtB,KAAD,CAAR;AACA,UAAMd,GAAG,GAAG,MAAMb,KAAK,CAACW,IAAN,CAAY,gBAAZ,CAAlB;;AAEA,QAAGE,GAAG,CAACe,MAAJ,KAAe,GAAlB,EAAsB;AAClBX,MAAAA,YAAY,CAACY,KAAb;AACArB,MAAAA,QAAQ,CAAC;AAAEa,QAAAA,IAAI,EAAEtB,aAAa,CAAC+B;AAAtB,OAAD,CAAR;AACH,KAHD,MAGK;AACDtB,MAAAA,QAAQ,CAAC;AACLa,QAAAA,IAAI,EAAEtB,aAAa,CAACgC,cADf;AAELR,QAAAA,OAAO,EAAE;AAAEE,UAAAA,KAAK,EAAEZ,GAAG,CAACE,IAAJ,CAASU;AAAlB;AAFJ,OAAD,CAAR;AAIH;AAGJ,GAhBD;AAiBH,CAlBM","sourcesContent":["import { authConstants } from \"./constants\";\r\nimport axios from \"axios\";\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport {\r\n  GET_ERRORS,\r\n  SET_CURRENT_USER,\r\n  USER_LOADING\r\n} from \"./types\";\r\n\r\n\r\nexport const login = (user) =>dispatch => {\r\n\r\n    console.log(user);\r\n    axios\r\n    .post(\"/admin/signin\", user)\r\n    .then(res => {\r\n\r\n      //Save to localStorage\r\n      const { token } = res.data;\r\n    });\r\n\r\n\r\n    // return async (dispatch) => {\r\n    //\r\n    //     dispatch({ type: authConstants.LOGIN_REQUEST });\r\n    //     const res = await axios.post(`/admin/signin`, {\r\n    //         ...user\r\n    //     });\r\n    //\r\n    //     if(res.status === 200){\r\n    //         const { token, user } = res.data;\r\n    //         localStorage.setItem('token', token);\r\n    //         localStorage.setItem('user', JSON.stringify(user));\r\n    //         dispatch({\r\n    //             type: authConstants.LOGIN_SUCCESS,\r\n    //             payload: {\r\n    //                 token, user\r\n    //             }\r\n    //         });\r\n    //     }else{\r\n    //         if(res.status === 400){\r\n    //             dispatch({\r\n    //                 type: authConstants.LOGIN_FAILURE,\r\n    //                 payload: { error: res.data.error }\r\n    //             });\r\n    //         }\r\n    //     }\r\n    // }\r\n}\r\n\r\nexport const isUserLoggedIn = () => {\r\n    return async dispatch => {\r\n        const token = localStorage.getItem('token');\r\n        if(token){\r\n            const user = JSON.parse(localStorage.getItem('user'));\r\n            dispatch({\r\n                type: authConstants.LOGIN_SUCCESS,\r\n                payload: {\r\n                    token, user\r\n                }\r\n            });\r\n        }else{\r\n            dispatch({\r\n                type: authConstants.LOGIN_FAILURE,\r\n                payload: { error: 'Failed to login' }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport const signout = () => {\r\n    return async dispatch => {\r\n\r\n        dispatch({ type: authConstants.LOGOUT_REQUEST });\r\n        const res = await axios.post(`/admin/signout`);\r\n\r\n        if(res.status === 200){\r\n            localStorage.clear();\r\n            dispatch({ type: authConstants.LOGOUT_SUCCESS });\r\n        }else{\r\n            dispatch({\r\n                type: authConstants.LOGOUT_FAILURE,\r\n                payload: { error: res.data.error }\r\n            });\r\n        }\r\n\r\n\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}