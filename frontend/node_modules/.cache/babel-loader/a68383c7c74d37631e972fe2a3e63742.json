{"ast":null,"code":"import { categoryConstansts } from \"../actions/constants\";\nconst initState = {\n  categories: [],\n  loading: false,\n  error: null\n};\n\nconst buildNewCategories = (parentId, categories, category) => {\n  let myCategories = [];\n\n  if (parentId == undefined) {\n    return [...categories, {\n      _id: category._id,\n      name: category.name,\n      slug: category.slug,\n      children: []\n    }];\n  }\n\n  for (let cat of categories) {\n    if (cat._id == parentId) {\n      myCategories.push({ ...cat,\n        children: cat.children ? buildNewCategories(parentId, [...cat.children, {\n          _id: category._id,\n          name: category.name,\n          slug: category.slug,\n          parentId: category.parentId,\n          children: category.children\n        }], category) : []\n      });\n    } else {\n      myCategories.push({ ...cat,\n        children: cat.children ? buildNewCategories(parentId, cat.children, category) : []\n      });\n    }\n  }\n\n  return myCategories;\n};\n\nexport default ((state = initState, action) => {\n  switch (action.type) {\n    case categoryConstansts.GET_ALL_CATEGORIES_SUCCESS:\n      state = { ...state,\n        categories: action.payload.categories\n      };\n      break;\n\n    case categoryConstansts.ADD_NEW_CATEGORY_REQUEST:\n      state = { ...state,\n        loading: true\n      };\n      break;\n\n    case categoryConstansts.ADD_NEW_CATEGORY_SUCCESS:\n      const category = action.payload.category;\n      const updatedCategories = buildNewCategories(category.parentId, state.categories, category);\n      console.log('updated categoires', updatedCategories);\n      state = { ...state,\n        categories: updatedCategories,\n        loading: false\n      };\n      break;\n\n    case categoryConstansts.ADD_NEW_CATEGORY_FAILURE:\n      state = { ...initState\n      };\n      break;\n  }\n\n  return state;\n});","map":{"version":3,"sources":["C:/Users/Aman/Desktop/Roc8/Selnyr/ecommerce-flipkart-clone/src/reducers/category.reducer.js"],"names":["categoryConstansts","initState","categories","loading","error","buildNewCategories","parentId","category","myCategories","undefined","_id","name","slug","children","cat","push","state","action","type","GET_ALL_CATEGORIES_SUCCESS","payload","ADD_NEW_CATEGORY_REQUEST","ADD_NEW_CATEGORY_SUCCESS","updatedCategories","console","log","ADD_NEW_CATEGORY_FAILURE"],"mappings":"AAAA,SAASA,kBAAT,QAAmC,sBAAnC;AAEA,MAAMC,SAAS,GAAG;AACdC,EAAAA,UAAU,EAAE,EADE;AAEdC,EAAAA,OAAO,EAAE,KAFK;AAGdC,EAAAA,KAAK,EAAE;AAHO,CAAlB;;AAOA,MAAMC,kBAAkB,GAAG,CAACC,QAAD,EAAWJ,UAAX,EAAuBK,QAAvB,KAAoC;AAC3D,MAAIC,YAAY,GAAG,EAAnB;;AAEA,MAAGF,QAAQ,IAAIG,SAAf,EAAyB;AACrB,WAAO,CACH,GAAGP,UADA,EAEH;AACIQ,MAAAA,GAAG,EAAEH,QAAQ,CAACG,GADlB;AAEIC,MAAAA,IAAI,EAAEJ,QAAQ,CAACI,IAFnB;AAGIC,MAAAA,IAAI,EAAEL,QAAQ,CAACK,IAHnB;AAIIC,MAAAA,QAAQ,EAAE;AAJd,KAFG,CAAP;AASH;;AAED,OAAI,IAAIC,GAAR,IAAeZ,UAAf,EAA0B;AAEtB,QAAGY,GAAG,CAACJ,GAAJ,IAAWJ,QAAd,EAAuB;AACnBE,MAAAA,YAAY,CAACO,IAAb,CAAkB,EACd,GAAGD,GADW;AAEdD,QAAAA,QAAQ,EAAEC,GAAG,CAACD,QAAJ,GAAeR,kBAAkB,CAACC,QAAD,EAAW,CAAC,GAAGQ,GAAG,CAACD,QAAR,EAAkB;AACpEH,UAAAA,GAAG,EAAEH,QAAQ,CAACG,GADsD;AAEpEC,UAAAA,IAAI,EAAEJ,QAAQ,CAACI,IAFqD;AAGpEC,UAAAA,IAAI,EAAEL,QAAQ,CAACK,IAHqD;AAIpEN,UAAAA,QAAQ,EAAEC,QAAQ,CAACD,QAJiD;AAKpEO,UAAAA,QAAQ,EAAEN,QAAQ,CAACM;AALiD,SAAlB,CAAX,EAMvCN,QANuC,CAAjC,GAMM;AARF,OAAlB;AAUH,KAXD,MAWK;AACDC,MAAAA,YAAY,CAACO,IAAb,CAAkB,EACd,GAAGD,GADW;AAEdD,QAAAA,QAAQ,EAAEC,GAAG,CAACD,QAAJ,GAAeR,kBAAkB,CAACC,QAAD,EAAWQ,GAAG,CAACD,QAAf,EAAyBN,QAAzB,CAAjC,GAAsE;AAFlE,OAAlB;AAIH;AAGJ;;AAGD,SAAOC,YAAP;AACH,CAxCD;;AA2CA,gBAAe,CAACQ,KAAK,GAAGf,SAAT,EAAoBgB,MAApB,KAA+B;AAC1C,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKlB,kBAAkB,CAACmB,0BAAxB;AACIH,MAAAA,KAAK,GAAG,EACJ,GAAGA,KADC;AAEJd,QAAAA,UAAU,EAAEe,MAAM,CAACG,OAAP,CAAelB;AAFvB,OAAR;AAIA;;AACJ,SAAKF,kBAAkB,CAACqB,wBAAxB;AACIL,MAAAA,KAAK,GAAG,EACJ,GAAGA,KADC;AAEJb,QAAAA,OAAO,EAAE;AAFL,OAAR;AAIA;;AACJ,SAAKH,kBAAkB,CAACsB,wBAAxB;AACI,YAAMf,QAAQ,GAAGU,MAAM,CAACG,OAAP,CAAeb,QAAhC;AACA,YAAMgB,iBAAiB,GAAGlB,kBAAkB,CAACE,QAAQ,CAACD,QAAV,EAAoBU,KAAK,CAACd,UAA1B,EAAsCK,QAAtC,CAA5C;AACAiB,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCF,iBAAlC;AAEAP,MAAAA,KAAK,GAAG,EACJ,GAAGA,KADC;AAEJd,QAAAA,UAAU,EAAEqB,iBAFR;AAGJpB,QAAAA,OAAO,EAAE;AAHL,OAAR;AAKA;;AACJ,SAAKH,kBAAkB,CAAC0B,wBAAxB;AACIV,MAAAA,KAAK,GAAG,EACJ,GAAGf;AADC,OAAR;AAGA;AA5BR;;AA+BA,SAAOe,KAAP;AACH,CAjCD","sourcesContent":["import { categoryConstansts } from \"../actions/constants\";\r\n\r\nconst initState = {\r\n    categories: [],\r\n    loading: false,\r\n    error: null\r\n};\r\n\r\n\r\nconst buildNewCategories = (parentId, categories, category) => {\r\n    let myCategories = [];\r\n\r\n    if(parentId == undefined){\r\n        return [\r\n            ...categories,\r\n            {\r\n                _id: category._id,\r\n                name: category.name,\r\n                slug: category.slug,\r\n                children: []\r\n            }\r\n        ];\r\n    }\r\n    \r\n    for(let cat of categories){\r\n\r\n        if(cat._id == parentId){\r\n            myCategories.push({\r\n                ...cat,\r\n                children: cat.children ? buildNewCategories(parentId, [...cat.children, {\r\n                    _id: category._id,\r\n                    name: category.name,\r\n                    slug: category.slug,\r\n                    parentId: category.parentId,\r\n                    children: category.children\r\n                }], category) : []\r\n            });\r\n        }else{\r\n            myCategories.push({\r\n                ...cat,\r\n                children: cat.children ? buildNewCategories(parentId, cat.children, category) : []\r\n            });\r\n        }\r\n\r\n        \r\n    }\r\n\r\n\r\n    return myCategories;\r\n}\r\n\r\n\r\nexport default (state = initState, action) => {\r\n    switch(action.type){\r\n        case categoryConstansts.GET_ALL_CATEGORIES_SUCCESS:\r\n            state = {\r\n                ...state,\r\n                categories: action.payload.categories\r\n            }\r\n            break;\r\n        case categoryConstansts.ADD_NEW_CATEGORY_REQUEST:\r\n            state = {\r\n                ...state,\r\n                loading: true\r\n            }\r\n            break;\r\n        case categoryConstansts.ADD_NEW_CATEGORY_SUCCESS:\r\n            const category = action.payload.category;\r\n            const updatedCategories = buildNewCategories(category.parentId, state.categories, category);\r\n            console.log('updated categoires', updatedCategories);\r\n            \r\n            state = {\r\n                ...state,\r\n                categories: updatedCategories,\r\n                loading: false,\r\n            }\r\n            break;\r\n        case categoryConstansts.ADD_NEW_CATEGORY_FAILURE:\r\n            state = {\r\n                ...initState\r\n            }\r\n            break;\r\n    }\r\n\r\n    return state;\r\n}"]},"metadata":{},"sourceType":"module"}